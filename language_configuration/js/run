#! /usr/local/bin/node

const fs = require('fs');
const path = require('path');

// Expected arg format: <input file path> <solution file path> <part>

if (process.argv.length < 5 || process.argv.length > 6) {
  console.error('Expected 3 args, but got %d', process.argv.length - 2);
}

const [,, inputFile, solutionFile, part, bench] = process.argv;

if (part !== '1' && part !== '2') {
  console.error(`'part' must be '1' or '2' (instead got '${part}')`);
}

try {
  process.env.input = fs.readFileSync(inputFile, 'utf8').trim();
} catch (e) {
  console.error(`Failed to read from input file: ${e}\n`);
  process.exit(1);
}

let solution;

try {
  solution = require(path.resolve(__dirname, '../../', solutionFile));
} catch (e) {
  console.error(`Failed to load solution file: ${e}\n`);
  process.exit(1);
}

try {
  if (!bench) {
    let time = process.hrtime.bigint();
    let result = solution[part]();
    time = process.hrtime.bigint() - time;
    console.log(`\nResult: ${result}\nTook: ${time}ns`);
  } else {
    let times = [];
    let results = [];
    let sol = solution[part];
    let benchStart = Date.now();
    const MIN_TIME_MS = 5000;
    const MIN_RUNS = 100;

    while (times < MIN_RUNS || Date.now() - benchStart < MIN_TIME_MS) {
      let start = process.hrtime.bigint();
      let result = sol();
      let end = process.hrtime.bigint();
      results.push(result);
      times.push(end - start);
    }

    // Aggregate results.
    let aggRes = results.reduce(
      (a, r) => {
        r[a] = (r[a] || 0) + 1;
        return a;
      },
      {},
    );

    console.log(`\nPerformed benchmark (${times.length} runs).`);
    if (Object.keys(aggRes).length > 1) {
      console.log('  Not all runs produced the same output! Results below...');
      for (let res in aggRes) {
        console.log(`    ${res}\t (${res[aggRes]} times)`);
      }
    } else {
      console.log(`  All runs agreed on the answer: ${results[0]}`);
    }
    const avgRuntime = times.reduce((x, y) => x + y, 0n) / BigInt(times.length);
    console.log(`Average runtime: ${avgRuntime}ns`);
  }
} catch (e) {
  console.error(`\nHit an error while running the code: ${e}.\n`);
  process.exit(1);
}
